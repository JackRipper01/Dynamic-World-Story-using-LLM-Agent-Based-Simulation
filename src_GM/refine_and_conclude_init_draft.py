# refine_story.py
import time
import os  # For checking file existence

try:
    from main import create_llm_instance
except ImportError:
    print("Warning: 'create_llm_instance' not found in main.py. Please ensure it's accessible or define LLM initialization here.")

# Use LLMChunkedStoryGenerator as it has the refine_and_conclude_story method
from story_generator import LLMChunkedStoryGenerator
import config
from logs import append_to_log_file

# Create an instance of the Story Generator for refinement
llm = create_llm_instance(
    config.MODEL_NAME,
    config.STORY_GENERATOR_GEN_CONFIG,
    purpose="Story Refiner"
)

# Use LLMChunkedStoryGenerator because its refine_and_conclude_story method is robust
story_refiner = LLMChunkedStoryGenerator(llm, config.TONE)

# Define parameters for refinement
initial_draft_file = "Initial_Story_Draft.txt"
final_output_file = "simulation_story_final.txt"
max_refinement_iterations = 10  # Safety break to prevent infinite loops

print(
    f"--- PHASE 2: Starting Iterative Refinement and Conclusion from '{initial_draft_file}' ---")

current_story_draft_for_refinement = ""
final_story_result = ""

try:
    if not os.path.exists(initial_draft_file):
        raise FileNotFoundError(
            f"'{initial_draft_file}' not found. Please run 'generate_chunked_draft.py' first.")

    with open(initial_draft_file, 'r', encoding='utf-8') as f:
        file_content = f.read()

        current_story_draft_for_refinement = file_content.strip()

    if not current_story_draft_for_refinement:
        print(f"'{initial_draft_file}' is empty or content could not be extracted. Cannot proceed with refinement.")
        exit()

    # Start with the loaded draft
    final_story_result = current_story_draft_for_refinement

    refinement_count = 0
    while refinement_count < max_refinement_iterations:
        refinement_count += 1
        print(
            f"\n--- Refinement Iteration {refinement_count}/{max_refinement_iterations} ---")

        response_from_llm = story_refiner.refine_and_conclude_story(
            current_story_so_far=final_story_result,  # Pass the current state of the story
            agent_configs=config.agent_configs,
            narrative_goal=config.NARRATIVE_GOAL
        )

        if "[ERROR]" in response_from_llm:
            print("Error during story refinement. Stopping iteration.")
            # final_story_result retains its last good state
            break

        if response_from_llm.startswith("[STORY_COMPLETE]"):
            final_story_result = response_from_llm[len(
                "[STORY_COMPLETE]"):].strip()
            print(
                f"Story concluded after {refinement_count} refinement iterations.")
            break
        elif response_from_llm.startswith("[CONTINUE_WRITING]"):
            new_segment = response_from_llm[len("[CONTINUE_WRITING]"):].strip()
            # Ensure new segment smoothly attaches
            if final_story_result and not final_story_result.endswith(('.', '!', '?')) and new_segment and new_segment[0].isupper():
                final_story_result += ". "
            elif final_story_result and not final_story_result.endswith(('.', '!', '?')) and new_segment and not new_segment[0].isupper():
                final_story_result += " "
            final_story_result += new_segment
            print("Story continued. Current total length:",
                  len(final_story_result.split()), "words.")
        else:
            print("Unexpected response format during refinement. Stopping iteration.")
            break

        time.sleep(10)

    if refinement_count >= max_refinement_iterations and not response_from_llm.startswith("[STORY_COMPLETE]"):
        print(
            f"Max refinement iterations ({max_refinement_iterations}) reached. Story may be incomplete.")
        print("Consider increasing 'max_refinement_iterations' or reviewing the last generated segment.")

except FileNotFoundError as e:
    print(f"Error: {e}")
    print("Please ensure 'Initial_Story_Draft.txt' exists and contains the initial story draft generated by 'generate_chunked_draft.py'.")
except Exception as e:
    print(f"An unexpected error occurred during the refinement phase: {e}")
    import traceback
    traceback.print_exc()  # Print full traceback for debugging

print("\n--- FINAL GENERATED STORY (Printed to Console) ---")
print(final_story_result)
print("--------------------------------------------------\n")

# --- Save the final story ---
if final_story_result:  # Only save if there's actual content
    try:
        with open(final_output_file, "w", encoding="utf-8") as f:
            f.write(f"Simulation Goal: {config.NARRATIVE_GOAL}\n")
            f.write("Characters:\n")
            for ac in config.agent_configs:
                f.write(f"  - {ac['name']}: {ac['identity']}\n")
            f.write("\n--- FINAL STORY (Chunked & Iteratively Refined) ---\n")
            f.write(final_story_result)
        print(f"\n(Final story also saved to {final_output_file})")
    except Exception as e:
        print(f"\n[Error] Could not save final story to file: {e}")
else:
    print("\nSkipping final story save as no content was generated or an error occurred.")
